// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  // Add these new fields:
  imagePublicId     String?
  password          String?
  resetToken        String?   @unique
  resetTokenExpiry  DateTime?
  lastUsernameChange DateTime?
  bio               String?   @db.Text
  location          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Existing relations
  accounts          Account[]
  sessions          Session[]
  expenses          Expense[]
  households        HouseholdMember[]
  // Add this relation if you've also added the AIAdvice model
  aiAdvice          AIAdvice[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Expense {
  id          String   @id @default(cuid())
  amount      Float
  description String
  date        DateTime
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  householdId String?
  household   Household? @relation(fields: [householdId], references: [id])
}

model Household {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members     HouseholdMember[]
  expenses    Expense[]
}

model HouseholdMember {
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  householdId String
  household   Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
  role        String   @default("member") // "admin" or "member"
  joinedAt    DateTime @default(now())

  @@id([userId, householdId])
}
